name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: "3.11"
          environment-file: environment.yml
          activate-environment: vision-tools
          use-mamba: true
          mamba-version: "*"

      - name: Cache conda environment
        uses: actions/cache@v4
        with:
          path: |
            ~/conda_pkgs_dir
            ~/.conda/envs
          key: ${{ runner.os }}-conda-${{ hashFiles('environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-conda-

      - name: Run tests with coverage
        shell: bash -el {0}
        run: pytest

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
        continue-on-error: true

  validate-startup:
    name: Validate App Startup
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: "3.11"
          environment-file: environment.yml
          activate-environment: vision-tools
          use-mamba: true
          mamba-version: "*"

      - name: Cache conda environment
        uses: actions/cache@v4
        with:
          path: |
            ~/conda_pkgs_dir
            ~/.conda/envs
          key: ${{ runner.os }}-conda-${{ hashFiles('environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-conda-

      - name: Validate app can start
        shell: bash -el {0}
        run: |
          set +e  # Don't exit on error
          
          # Start the app in the background
          timeout 30s python run.py > startup.log 2>&1
          TIMEOUT_EXIT=$?
          
          # Display the log
          echo "=== Startup Log ==="
          cat startup.log
          echo "=== End Log ==="
          
          # Check if the app started successfully by looking for Flask startup messages
          if grep -q "WARNING: This is a development server" startup.log || \
             grep -q "Running on" startup.log || \
             grep -q "Starting acquisition and processing threads" startup.log; then
            echo "✓ App started successfully (timeout exit code: $TIMEOUT_EXIT)"
            exit 0
          else
            echo "✗ App failed to start or hung during startup"
            exit 1
          fi

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: "3.11"
          environment-file: environment.yml
          activate-environment: vision-tools
          use-mamba: true
          mamba-version: "*"

      - name: Cache conda environment
        uses: actions/cache@v4
        with:
          path: |
            ~/conda_pkgs_dir
            ~/.conda/envs
          key: ${{ runner.os }}-conda-${{ hashFiles('environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-conda-

      - name: Check code formatting
        shell: bash -el {0}
        run: ruff format --check app tests

      - name: Run linter
        shell: bash -el {0}
        run: ruff check app tests